={practice_project_settings} Tuning Practice - Player Settings

This chapter introduces the Player items in Project Settings that affect performance. 

=={practice_player_settings_scripting_backend} Scripting Backend

Unity allows you to choose between Mono and IL2CPP as the Scripting Backend on platforms such as Android and Standalone (Windows, macOS, Linux). 
We recommend choosing IL2CPP because of the performance gains as described in @<hd>{basic|basic_unity_output_binary_il2cpp} of @<chapref>{basic}. 

//image[scripting_backend][Configuring Scripting Backend][scale=0.75]

 In addition, changing the Scripting Backend to IL2CPP will also change the @<kw>{C++ Compiler Configuration} can be selected. 

//image[compiler_configuration][Setting of C++ Compiler Configuration][scale=0.75]

 Here you can choose between Debug, Release, and Master, each of which has a tradeoff between build time and degree of optimization, so it is best to use the one that best suits your build objectives. 

==={practice_player_settings_compiler_configuration_debug} Debug

Debug does not perform well at runtime because no optimization is performed, but build time is the shortest compared to the other settings. 

==={practice_player_settings_compiler_configuration_release} Release

Optimization improves run-time performance and reduces the size of built binaries, but increases build time. 

==={practice_player_settings_compiler_configuration_master} Master

All optimizations available for the platform are enabled. 
For example, Windows builds will use more aggressive optimizations such as link-time code generation (LTCG). 
In return, build times will be even longer than with the Release setting, but Unity recommends using the Master setting for production builds if this is acceptable. 


=={practice_player_settings_code_stripping} Strip Engine Code / Managed Stripping Level

@<kw>{Strip Engine Code} is a Unity feature that allows you to set the @<kw>{Managed Stripping Level} is from the CIL bytecode generated by compiling C#, and 
is expected to reduce the size of the built binary by removing unused code, respectively. 

However, since the determination of whether a given code is used relies strongly on static analysis, types that are not directly referenced in the 
code, or code that is dynamically called in reflection, may be mistakenly removed. 

In such cases, the @<kw>{link.xml} file or by specifying the @<code>{Preserve} attribute. @<fn>{managed_code_stripping}

//footnote[managed_code_stripping][@<href>{https://docs.unity3d.com/2020.3/Documentation/Manual/ManagedCodeStripping.html}]

=={practice_player_settings_accelerometer} Accelerometer Frequency (iOS)

This is an iOS-specific setting that allows you to change the sampling frequency of the accelerometer. 
The default setting is 60 Hz, so set the frequency appropriately. 
If you are not using the accelerometer, be sure to disable the setting. 

//image[ios_accelerometer_frequency][Sampling Frequency Setting][scale=0.75]
 
